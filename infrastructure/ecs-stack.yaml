AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster and Service Configuration with Target Group and ALB

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC created in the VPC stack.

  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Public subnets for ALB.

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnets for ECS tasks.

  ALBSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group ID for ALB.

  ECSSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group ID for ECS tasks.

  ECRRepositoryUri:
    Type: String
    Description: Docker image URI in Amazon ECR.

Resources:
  # Application Load Balancer (ALB)
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "ALB-${AWS::StackName}"
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref ALBSecurityGroupId
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "TG-${AWS::StackName}"
      Port: 8080
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: ip

  # Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "ECSCluster-${AWS::StackName}"

  # ECS Task Role
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: "*"

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "ECSTask-${AWS::StackName}"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      ExecutionRoleArn: !Ref ECSTaskRole
      ContainerDefinitions:
        - Name: spring-boot-app
          Image: !Ref ECRRepositoryUri
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/spring-boot-app
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 3
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref PrivateSubnets
          SecurityGroups:
            - !Ref ECSSecurityGroupId
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: spring-boot-app
          ContainerPort: 8080

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: The name of the ECS service
    Value: !Ref ECSService