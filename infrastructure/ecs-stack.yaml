AWSTemplateFormatVersion: '2010-09-09'
Description: Optimized ECS Cluster with Fargate Tasks, Auto-Scaling, and Full Blue/Green Deployment

Parameters:
  EnvironmentName:
    Type: String
    Default: dev
    Description: Environment name (e.g., dev, prod)
  ECRRepositoryURI:
    Type: String
    Description: URI of the ECR repository
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of private subnet IDs
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-05b963638146801a5
    Description: Security Group ID
  ALBListenerArn:
    Type: String
    Default: arn:aws:elasticloadbalancing:us-east-1:639032722473:loadbalancer/app/dev-ALB/cf5314d6db52f920
    Description: ARN of the ALB listener
  s3BucketName:
    Type: String
    Default: image-gallery-mascot
    Description: Name of the S3 bucket

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${EnvironmentName}-ECSCluster"

  # ECS Task Role (Access to S3)
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${EnvironmentName}-Task"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "1024"
      Memory: "2048"
      ExecutionRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${EnvironmentName}-Container"
          Image: !Ref ECRRepositoryURI
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "/ecs/${EnvironmentName}"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  # ECS Blue Service
  ECSBlueService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 3
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref ECSSecurityGroup
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub "${EnvironmentName}-Container"
          ContainerPort: 8080
          TargetGroupArn: !Ref BlueTargetGroup

  # ECS Green Service
  ECSGreenService:
    Type: AWS::ECS::Service
    DependsOn: ECSBlueService
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref ECSSecurityGroup
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub "${EnvironmentName}-Container"
          ContainerPort: 8080
          TargetGroupArn: !Ref GreenTargetGroup

  # Blue Target Group
  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvironmentName}-BlueTG"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      TargetType: ip

  # Green Target Group
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${EnvironmentName}-GreenTG"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPort: 8080
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      TargetType: ip

  # ALB Listener Rule for Blue
  ALBListenerRuleBlue:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BlueTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /blue/*
      ListenerArn: !Ref ALBListenerArn
      Priority: 1

  # ALB Listener Rule for Green
  ALBListenerRuleGreen:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref GreenTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /green/*
      ListenerArn: !Ref ALBListenerArn
      Priority: 2

  # Application Auto Scaling for ECS Service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 5
      MinCapacity: 1
      ResourceId: !Sub "service/${ECSCluster}/${ECSBlueService}"
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Scaling Policy Based on CPU Utilization
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleInCooldown: 300
        ScaleOutCooldown: 300

  # IAM Role for Application Auto Scaling
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSScalingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"

Outputs:
  ECSClusterName:
    Description: The name of the ECS cluster
    Value: !Ref ECSCluster
  ECSBlueServiceName:
    Description: The name of the ECS Blue service
    Value: !Ref ECSBlueService
  ECSGreenServiceName:
    Description: The name of the ECS Green service
    Value: !Ref ECSGreenService

